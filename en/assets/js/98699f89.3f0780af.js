"use strict";(self.webpackChunkathenaserving=self.webpackChunkathenaserving||[]).push([[4002],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9902:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4,sidebar_label:"4\u3001Business Image Construction"},o="Business image construction",s={unversionedId:"\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u4e1a\u52a1\u955c\u50cf\u6784\u5efa",id:"version-2.1.0/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u4e1a\u52a1\u955c\u50cf\u6784\u5efa",title:"Business image construction",description:"When the inference logic of mnist's wrapper.py is successfully executed, the project file needs to be packaged to build a service image. The way is as follows:",source:"@site/versioned_docs/version-2.1.0/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u4e1a\u52a1\u955c\u50cf\u6784\u5efa.md",sourceDirName:"\u52a0\u8f7d\u5668/\u521b\u5efawrapper",slug:"/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u4e1a\u52a1\u955c\u50cf\u6784\u5efa",permalink:"/athena_website/en/docs/2.1.0/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u4e1a\u52a1\u955c\u50cf\u6784\u5efa",draft:!1,editUrl:"https://github.com/iflytek/athena_website/tree/master/versioned_docs/version-2.1.0/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u4e1a\u52a1\u955c\u50cf\u6784\u5efa.md",tags:[],version:"2.1.0",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"4\u3001Business Image Construction"},sidebar:"docSidebar",previous:{title:"3\u3001Implementing Inference Logic",permalink:"/athena_website/en/docs/2.1.0/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u5b9e\u73b0\u63a8\u7406"},next:{title:"5\u3001Service Deployment",permalink:"/athena_website/en/docs/2.1.0/\u52a0\u8f7d\u5668/\u521b\u5efawrapper/\u670d\u52a1\u90e8\u7f72"}},l={},c=[{value:"Method 1: Modify the Dockerfile in the mnist directory. (The base image has built-in python3.9)",id:"method-1-modify-the-dockerfile-in-the-mnist-directory-the-base-image-has-built-in-python39",level:3},{value:"Method 2: Use envd and build the image, and create the build.envd file in the mnist directory.",id:"method-2-use-envd-and-build-the-image-and-create-the-buildenvd-file-in-the-mnist-directory",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"business-image-construction"},"Business image construction"),(0,i.kt)("p",null,"When the inference logic of mnist's wrapper.py is successfully executed, the project file needs to be packaged to build a service image. The way is as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build the inference environment through python's requirements.txt file. (method used in this example)"),(0,i.kt)("li",{parentName:"ul"},"Build the inference environment through the yaml environment dependencies exported by conda.")),(0,i.kt)("h3",{id:"method-1-modify-the-dockerfile-in-the-mnist-directory-the-base-image-has-built-in-python39"},"Method 1: Modify the Dockerfile in the mnist directory. (The base image has built-in python3.9)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# please visit https://github.com/xfyun/aiges/releases to get stable and suitable iamges.\n\nFROM public.ecr.aws/iflytek-open/aiges-gpu:11.6-1.17-3.9.13-ubuntu1804-v2.0.0-rc6\n\n#  do this if you are on the chinese server.\n\nRUN pip3 config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple/\n\nADD requirements.txt /home/aiges\n\nRUN pip install -r /home/aiges/requirements.txt\n\nADD wrapper /home/aiges\n\nCMD ["sh", "-c", "./AIservice -m=0 -c=aiges.toml -s=svcName -u=http://companion.xfyun.iflytek:6868 -p=AIaaS -g=dx"]\n')),(0,i.kt)("p",null,"Build the image via docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -f Dockerfile -t mnist .\n")),(0,i.kt)("h3",{id:"method-2-use-envd-and-build-the-image-and-create-the-buildenvd-file-in-the-mnist-directory"},"Method 2: Use envd and build the image, and create the build.envd file in the mnist directory."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://iflytek.github.io/athena_website/docs/%E4%B8%9A%E5%8A%A1%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/%E5%8A%A0%E8%BD%BD%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA"},"\u53c2\u8003\u6587\u6863-envd")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def build():\n    config.pip_index(url = "https://pypi.tuna.tsinghua.edu.cn/simple")\n    base(language="python3.8", os="public.ecr.aws/iflytek-open/aiges-gpu:11.6-1.17-3.9.13-ubuntu1804-v2.0.0-rc6")              #\u52a0\u8f7d\u6307\u5b9a\u7684base\u955c\u50cf\u548cpython\u7248\u672c\n    install.python_packages(requirements="requirements.txt")        \n                                                            \n')),(0,i.kt)("p",null,"Build the image via envd:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"envd build -t mnist -f build.envd\n")))}u.isMDXComponent=!0}}]);